
" -----------------------------------------------------------------
" }}} VIM-PLUG {{{
" -----------------------------------------------------------------

" declare plugins

silent! if plug#begin()

    Plug        'ekiefl/auto-pairs'
    Plug      'chrisbra/csv.vim'
    Plug      'ctrlpvim/ctrlp.vim'
    Plug       'morhetz/gruvbox'
    Plug   'davidhalter/jedi-vim'
    Plug        'sjbach/lusty'
    Plug    'scrooloose/nerdtree'
    Plug      'jalvesaq/Nvim-R'
    Plug     'rust-lang/rust.vim'
    Plug     'godlygeek/tabular'
    Plug    'majutsushi/tagbar'
    Plug      'jalvesaq/vimcmdline'
    Plug   'vim-airline/vim-airline'
    Plug   'vim-airline/vim-airline-themes'
    Plug        'qpkorr/vim-bufkill'
    Plug         'tpope/vim-fugitive'
    Plug      'airblade/vim-gitgutter'
    Plug         'tpope/vim-surround'

    call plug#end()
endif

" -----------------------------------------------------------------
" }}} auto-pairs  {{{  # pairs chars, see ~/.vim/after/indent/python.vim
" -----------------------------------------------------------------

" pressing enter at {|} where | is cursor position not working?
" https://github.com/jiangmiao/auto-pairs/issues/215
"
" -----------------------------------------------------------------
" }}} ctrlp.vim  {{{  # fuzzy file/buf search
" -----------------------------------------------------------------

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_custom_ignore = '__pycache__\|DS_Store\|git\|build'
nnoremap <leader>f :CtrlP<CR>

" -----------------------------------------------------------------
" }}} csv.vim  {{{  # make opening csv files enjoyable
" -----------------------------------------------------------------

function ToggleCSV()
    :set nolist
    :CSVTable
endfunction
nnoremap <leader>ee :call ToggleCSV()<cr>

let g:csv_highlight_column = 'y'
aug CSV_Editing
au!
"au BufRead,BufWritePost *.csv :set nolist " required for tab-indented .csv
au BufRead,BufWritePost *.csv :%ArrangeColumn
"au BufWritePre *.csv :set list
au BufWritePre *.csv :%UnArrangeColumn
aug end

" -----------------------------------------------------------------
" }}} gruvbox  {{{  # retro color scheme
" -----------------------------------------------------------------
set term=xterm-256color
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'medium' " soft, medium and hard.
set background=dark " dark or light

" -----------------------------------------------------------------
" }}} jedi-vim  {{{  # python autocompletion
" -----------------------------------------------------------------

inoremap <expr> <C-j>     pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr> <C-k>     pumvisible() ? "\<C-p>" : "\<C-k>"

" This says whether jedi is active or not
let g:jedi#completions_enabled = 1

let g:jedi#use_splits_not_buffers = ''
let g:jedi#popup_on_dot = 0
let g:jedi#documentation_command = '<localleader>rh'
"let g:jedi#smart_auto_mappings = 0
let g:jedi#completions_command = '<C-space>'
let g:jedi#auto_close_doc = 1
"
:inoremap <buffer> <localleader>rh <esc>mf%:call jedi#show_documentation()<cr><c-w>j`fa
" req'd for g:jedi#show_call_signatures=2
" normally removes INSERT/VISUAL/NORMAL mode info,
" but not with airline plugin
:set noshowmode
"
"" causes immense lag in insert mode.
""let g:jedi#show_call_signatures = '2' " place in cmd line
let g:jedi#show_call_signatures = "0"

" toggle autopopup on an off (useful when files are big)
function TogglePopup()
    let popup_status = g:jedi#popup_on_dot
    if popup_status == 0
        let g:jedi#popup_on_dot = 1
    else
        let g:jedi#popup_on_dot = 0
    endif
endfunction
nnoremap <leader>. :call TogglePopup()<cr>

" -----------------------------------------------------------------
" }}} lusty  {{{  # grep all buffers (<leader>lg)
" -----------------------------------------------------------------

" suppress 'you don't have ruby so lusty wont work' msg
let g:LustyJugglerSuppressRubyWarning = 1

" -----------------------------------------------------------------
" }}} nerdtree  {{{  # file explorer
" -----------------------------------------------------------------

map <leader>o :NERDTree<CR>
let NERDTreeShowLineNumbers=1

" -----------------------------------------------------------------
" }}} Nvim-R {{{  #  turn vim into an R environment
" -----------------------------------------------------------------

let R_assign=0 " dont replace _ with <-, i am a big boy

" -----------------------------------------------------------------
" }}} rust.vim {{{  # make vim a workable IDE environment for rust
" -----------------------------------------------------------------

" See ~/.vim/ftplugin/rust.vim for rust filetype specific settings
let g:rust_clip_command = 'pbcopy'
let g:rustfmt_autosave = 1

" -----------------------------------------------------------------
" }}} tabular {{{  # tabularize lines
" -----------------------------------------------------------------

" :'<'>Tab /<delimiter>

" -----------------------------------------------------------------
" }}} tagbar {{{  # search files using tags (e.g. methods, classes)
" -----------------------------------------------------------------

let g:tagbar_left = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_width = 38
map <leader>t :TagbarToggle<CR>

" -----------------------------------------------------------------
" }}} vim-airline {{{  # beefs the status bar
" -----------------------------------------------------------------

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_theme='simple'
let g:airline#extensions#tabline#enabled = 1 " shows buffer tabs
let g:airline#extensions#tagbar#flags = 'f' " add full tag (shows method AND class in python)
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#csv#column_display = 'Name'
set nolist

" -----------------------------------------------------------------
" }}} vim-bufkill {{{  # kill buffers without closing the associated window
" -----------------------------------------------------------------

" Normally I close buffers with <leader>c. If you don't want the window
" to close, use <leader>C instead (thanks to this plugin)

map <leader>C :BW!<CR>

" -----------------------------------------------------------------
" }}} vim-fugitive {{{  # everything git
" -----------------------------------------------------------------

nnoremap <Leader>gb :Git blame<CR>
nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>gd :Gvdiffsplit<CR>
nnoremap <Leader>gp :Git push<CR>

" -----------------------------------------------------------------
" }}} vim-gitgutter {{{  # + useful for partial file staging
" -----------------------------------------------------------------

" [c and ]c to find git chunks. <leader>hp to preview hunk in new
" window, saving window stages the hunk

" -----------------------------------------------------------------
" }}} vim-surround {{{  # surround selections with enclosing chars
" -----------------------------------------------------------------

" :'<'>S<enclosing_charater>

" -----------------------------------------------------------------
" }}} 
" -----------------------------------------------------------------

" I keep pathogen around even though I prefer Plugged. Check ~/.vim/bundle to see what I maintain
" with pathogen
execute pathogen#infect()

" when running :! commands, this gives access to your aliases
let $BASH_ENV = "~/.bash_aliases"

" source abbreviations
so ~/.vim/abbreviations.vim
so ~/.vim/myscripts.vim

" vimpyter
autocmd Filetype ipynb nmap <silent><Leader>j :VimpyterStartJupyter<CR>

" something overwrites this other than gruvbox, gotta put it at end of file
" avoids annoying issue where things that are not text have black background
" by making the background black. Not ideal but looks kind of good. I could get
" used to it.
highlight Normal ctermbg=NONE


