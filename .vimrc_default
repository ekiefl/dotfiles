let mapleader = "\<Space>"
let maplocalleader = ','

" -----------------------------------------------------------------
" VIM-PLUG {{{
" -----------------------------------------------------------------

" declare plugins

silent! if plug#begin()

    " as recommended
    Plug 'embear/vim-localvimrc'
    Plug 'vim-autoformat/vim-autoformat'
    Plug 'prabirshrestha/asyncomplete.vim'
    Plug 'prabirshrestha/async.vim'
    Plug 'prabirshrestha/vim-lsp'
    Plug 'mattn/vim-lsp-settings'
    Plug 'prabirshrestha/asyncomplete-lsp.vim'
    Plug 'lakshayg/vim-bazel'
    Plug 'tpope/vim-fugitive'

    " essential function
    Plug 'ekiefl/auto-pairs'
    Plug 'tpope/vim-surround'

    " aesthetic
    Plug 'sainnhe/everforest'
    Plug 'morhetz/gruvbox'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'

    " nice to have
    Plug 'preservim/tagbar'
    Plug 'scrooloose/nerdtree'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'sjbach/lusty'

    " R IDE
    Plug 'jalvesaq/Nvim-R', { 'tag': 'v0.9.14' }

    " Jupyter
    Plug 'untitled-ai/jupyter_ascending.vim'

    call plug#end()
endif

" -----------------------------------------------------------------
" }}} vim-fugitive {{{  # everything git
" -----------------------------------------------------------------

nnoremap <Leader>gb :Git blame<CR>
nnoremap <Leader>gs :Git<CR>
nnoremap <Leader>gd :Gvdiffsplit<CR>
nnoremap <Leader>gp :Git push<CR>
nnoremap <Leader>gg :buffer G<CR>

:command -nargs=+ Ggr execute 'silent Ggrep!' <q-args> | cw | redraw!
nnoremap <C-f> :Ggr <cword><CR>

" -----------------------------------------------------------------
" }}} vim-lsp {{{
" -----------------------------------------------------------------

" To get things running for your project, you must run the following
" pip install "python-lsp-server[all]"
" pip install pylsp-mypy
" Then in vim run :LspInstallServer

nnoremap <Leader>d :LspDefinition<CR>
nnoremap <localleader>d :LspPeekDefinition<CR>
nnoremap <localleader>rh :LspHover<CR>

nnoremap <Leader>st :LspDocumentDiagnostics<CR>
nnoremap <Leader>n :LspNextDiagnostic -wrap=0<CR>
nnoremap <Leader>p :LspPreviousDiagnostic -wrap=0<CR>

autocmd FileType python setlocal tagfunc=lsp#tagfunc

let g:lsp_diagnostics_enabled = 1
let g:lsp_diagnostics_virtual_text_enabled = 0
let g:lsp_diagnostics_echo_cursor = 1
let g:lsp_diagnostics_echo_delay = 0
let g:lsp_diagnostics_highlights_insert_mode_enabled = 0
let g:lsp_diagnostics_highlights_delay = 200
let g:lsp_diagnostics_signs_error = {'text': 'E>'}
let g:lsp_diagnostics_signs_warning = {'text': 'W>'}
let g:lsp_signature_help_delay = 100

au User lsp_setup call lsp#register_server({
    \ 'name': 'pylsp',
    \ 'cmd': {server_info->['pylsp']},
    \ 'allowlist': ['python'],
    \ })
let g:lsp_settings_filetype_python = "pylsp"

let g:asyncomplete_enable_for_all = 1

" -----------------------------------------------------------------
" }}} auto-pairs  {{{  # pairs chars, see ~/.vim/after/indent/python.vim
" -----------------------------------------------------------------

" pressing enter at {|} where | is cursor position not working?
" https://github.com/jiangmiao/auto-pairs/issues/215

" -----------------------------------------------------------------
" }}} vim-surround {{{  # surround selections with enclosing chars
" -----------------------------------------------------------------

" :'<'>S<enclosing_character>

" -----------------------------------------------------------------
" }}} gruvbox/everforest  {{{  # color schemes
" -----------------------------------------------------------------

set term=xterm-256color
" comment to get a more grey background, comment out if using light scheme
"highlight Normal ctermbg=None

" gruvbox settings
let g:gruvbox_contrast_dark = 'hard' " soft, medium and hard.
let g:gruvbox_contrast_light = 'hard' " soft, medium and hard.

" everforest settings
let g:everforest_disable_italic_comment = 1
let g:everforest_background = 'hard'
let g:everforest_better_performance = 1

set background=dark " dark or light
colorscheme everforest " gruvbox/everforest

" -----------------------------------------------------------------
" }}} vim-airline {{{  # beefs the status bar
" -----------------------------------------------------------------

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_theme='everforest'
let g:airline#extensions#tabline#enabled = 1 " shows buffer tabs
let g:airline#extensions#tagbar#flags = 'f' " add full tag (shows method AND class in python)
let g:airline#extensions#csv#enabled = 1
let g:airline#extensions#csv#column_display = 'Name'
set nolist

" -----------------------------------------------------------------
" }}} tagbar {{{  # search files using tags (e.g. methods, classes)
" -----------------------------------------------------------------

let g:tagbar_left = 1
let g:tagbar_show_linenumbers = 0
let g:tagbar_width = 38
map <leader>t :TagbarToggle<CR>
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_sort = 0

set updatetime=250

" -----------------------------------------------------------------
" }}} nerdtree  {{{  # file explorer
" -----------------------------------------------------------------

map <leader>o :NERDTree<CR>
let NERDTreeShowLineNumbers=1

" -----------------------------------------------------------------
" }}} ctrlp.vim  {{{  # fuzzy file/buf search (<leader>f)
" -----------------------------------------------------------------

let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_custom_ignore = '__pycache__\|DS_Store\|git\|build'
nnoremap <leader>f :CtrlP<CR>

" -----------------------------------------------------------------
" }}} lusty  {{{  # grep all buffers (<leader>lg)
" -----------------------------------------------------------------

" suppress 'you don't have ruby so lusty wont work' msg
let g:LustyJugglerSuppressRubyWarning = 1

" -----------------------------------------------------------------
" }}} vim-autoformat  {{{
" -----------------------------------------------------------------

let g:formatdef_isort= '"isort -"'
let g:formatters_python = ["isort", "black"]
let g:run_all_formatters_python = 1

nnoremap <Leader>a :Autoformat<CR>


" -----------------------------------------------------------------
" }}} Nvim-R {{{  #  turn vim into an R environment
" -----------------------------------------------------------------

let R_assign=0 " dont replace _ with <-, i am a big boy

" -----------------------------------------------------------------
" }}} Settings {{{
" -----------------------------------------------------------------

" when running :! commands, this gives access to your aliases
let $BASH_ENV = "~/.bash_aliases"

" Manage the window title for talon contexts, i.e. what kind of file is being edited, what mode is vim in?
autocmd BufEnter * execute "silent !title vim " . expand("%:t")

nnoremap <leader>ev :split ~/.vimrc<cr>
nnoremap <leader>eb :split ~/.bashrc<cr>
nnoremap <leader>ea :split ~/.bash_aliases<cr>

" source abbreviations
so ~/.vim/abbreviations.vim
so ~/.vim/myscripts.vim

set list " use $ sign at end of line

highlight LineNr ctermfg=grey
highlight Normal ctermbg=NONE
