# ----------------------------------------------------------------------
#  }}} Run a command for a given commit and repo {{{
# ----------------------------------------------------------------------

# Function to run a command in the context of a specific git commit within a repository.
# Temporarily checks out the commit, runs the command from the original directory,
# and then restores the original git state and working directory.
#
# Usage: with <repo_path> <commit_hash> <command> [args...]
# Example: with /path/to/my/repo a1b2c3d git log -n 1
with() {
    # Check if enough arguments are provided
    if [ "$#" -lt 3 ]; then
        # Print usage message to standard error
        echo "Usage: with <repo_path> <commit_hash> <command> [args...]" >&2
        return 1 # Return error code
    fi

    local REPO="$1"
    local COMMIT="$2"
    local WD # Variable for original working directory
    local CURRENT_STATE # Variable for original git state (branch/commit)
    local NO_STASH # Flag to track if stash was used (1 = no stash, 0 = stash used)
    local cmd_exit_code

    # Remove the first two arguments (REPO and COMMIT) from the positional parameters ($@)
    shift 2
    # Now, "$@" contains the command and its arguments to be executed

    # Get the physical current working directory (safer with symlinks)
    WD=$(pwd -P)
    if [ -z "$WD" ]; then
        echo "Error: Could not get current working directory." >&2
        return 1
    fi

    # --- Prepare Git Repo ---
    # Change to the repository directory
    if ! cd "$REPO"; then
        echo "Error: Could not change directory to '$REPO'." >&2
        return 1
    fi

    # Get the current branch name or commit hash (if detached HEAD)
    # Try symbolic-ref first (for branches), fall back to rev-parse (for commits/detached HEAD)
    CURRENT_STATE=$(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse HEAD 2>/dev/null)
    if [ -z "$CURRENT_STATE" ]; then
        echo "Error: Could not determine current git state in '$REPO'." >&2
        cd "$WD" # Attempt to return to original directory
        return 1
    fi

    # Try checking out the target commit quietly.
    if git checkout "$COMMIT" --quiet 2>/dev/null; then
        NO_STASH=1 # No stash was needed
    else
        # If checkout failed (likely due to local changes), try stashing first.
        echo "Attempting to stash local changes in '$REPO'..." >&2
        if git stash push -m "with_function_stash_$(date +%s)" --quiet && git checkout "$COMMIT" --quiet; then
            NO_STASH=0 # Stash was needed and successful
        else
            echo "Error: Could not checkout commit '$COMMIT', even after attempting to stash." >&2
            # Attempt to restore original state before exiting
            git checkout "$CURRENT_STATE" --quiet 2>/dev/null # Best effort restore
            cd "$WD"
            return 1
        fi
    fi

    # --- Execute Command ---
    # Change back to the original working directory to run the command
    if ! cd "$WD"; then
       echo "Error: Could not change back to original directory '$WD' to run command." >&2
       # Attempt to restore git state before exiting
       cd "$REPO" && git checkout "$CURRENT_STATE" --quiet 2>/dev/null
       if [ "$NO_STASH" -eq 0 ]; then
           # Try to pop stash if we created one, ignoring errors as we are already failing
           git stash pop --quiet 2>/dev/null
       fi
       cd "$WD" # Final attempt to return
       return 1
    fi

    echo "======================================================================="
    echo "Running command in context of $REPO @ $COMMIT"
    echo "Command: $@"
    echo "-----------------------------------------------------------------------"

    # Execute the command and its arguments directly and safely using "$@"
    # This correctly handles spaces and special characters in the command/args.
    "$@"
    cmd_exit_code=$? # Capture the exit code of the user's command

    echo "======================================================================="
    echo "Command finished with exit code: $cmd_exit_code"

    # --- Restore Git Repo State ---
    # Change back to the repository to restore state
    if ! cd "$REPO"; then
        echo "Error: Could not change back to repo '$REPO' to restore state." >&2
        # Cannot reliably restore git state if we can't cd back
        cd "$WD" # Go back to original WD at least
        # State is potentially inconsistent, return error
        # Consider returning cmd_exit_code or a specific error code? Returning 1 for now.
        return 1
    fi

    # Restore the original git state (branch or commit)
    if ! git checkout "$CURRENT_STATE" --quiet; then
       echo "Warning: Could not checkout original state '$CURRENT_STATE'. Manual check needed in '$REPO'." >&2
       # Continue to try and pop stash if needed, but state might be wrong
    fi

    # Pop the stash if one was created
    if [ "$NO_STASH" -eq 0 ]; then
        echo "Popping stashed changes in '$REPO'..." >&2
        if ! git stash pop --quiet; then
            echo "Warning: Could not pop stash in '$REPO'. Manual check needed (git stash list)." >&2
            # Stash might conflict now, user needs to resolve
        fi
    fi

    # --- Finish ---
    # Return to the original working directory
    if ! cd "$WD"; then
        # This is unlikely if we got here, but check anyway
        echo "Warning: Could not change back to original directory '$WD' after completion." >&2
        # We're likely in the repo dir still
        return 1 # Indicate potential issue
    fi

    # Return the exit code of the command that was run
    return $cmd_exit_code
}

# ----------------------------------------------------------------------
#  }}} Git search and replace repo  {{{
# ----------------------------------------------------------------------

gitsed () {
    ORIG=$1
    REPLACE=$2
    SUBDIR=$3
    git grep -l "${ORIG}" ${SUBDIR} | xargs sed -i "" -e "s/${ORIG}/${REPLACE}/g"
}

# ----------------------------------------------------------------------
#  }}} Make a conda environment. Remove existing if it exists  {{{
# ----------------------------------------------------------------------

cm () {
    NAME=$1
    PYTHON_VERSION=${2:-3.11}
    conda deactivate
    conda deactivate
    conda env remove --name $NAME
    conda create -y -n $NAME python=$PYTHON_VERSION
    conda activate $NAME
}

cx () {
    NAME=$1
    conda deactivate
    conda deactivate
    conda env remove --name $NAME
}

